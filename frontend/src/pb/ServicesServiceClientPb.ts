/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.1
// source: services.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as user_pb from './user_pb';
import * as post_pb from './post_pb';


export class ArtGeneratorServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLoginUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/LoginUser',
    grpcWeb.MethodType.UNARY,
    user_pb.LoginRequest,
    user_pb.LoginResponse,
    (request: user_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    user_pb.LoginResponse.deserializeBinary
  );

  loginUser(
    request: user_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.LoginResponse>;

  loginUser(
    request: user_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<user_pb.LoginResponse>;

  loginUser(
    request: user_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/LoginUser',
        request,
        metadata || {},
        this.methodDescriptorLoginUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/LoginUser',
    request,
    metadata || {},
    this.methodDescriptorLoginUser);
  }

  methodDescriptorLogoutUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/LogoutUser',
    grpcWeb.MethodType.UNARY,
    user_pb.LogoutRequest,
    user_pb.LogoutResponse,
    (request: user_pb.LogoutRequest) => {
      return request.serializeBinary();
    },
    user_pb.LogoutResponse.deserializeBinary
  );

  logoutUser(
    request: user_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.LogoutResponse>;

  logoutUser(
    request: user_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<user_pb.LogoutResponse>;

  logoutUser(
    request: user_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.LogoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/LogoutUser',
        request,
        metadata || {},
        this.methodDescriptorLogoutUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/LogoutUser',
    request,
    metadata || {},
    this.methodDescriptorLogoutUser);
  }

  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/RefreshToken',
    grpcWeb.MethodType.UNARY,
    user_pb.RefreshTokenRequest,
    user_pb.RefreshTokenResponse,
    (request: user_pb.RefreshTokenRequest) => {
      return request.serializeBinary();
    },
    user_pb.RefreshTokenResponse.deserializeBinary
  );

  refreshToken(
    request: user_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.RefreshTokenResponse>;

  refreshToken(
    request: user_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.RefreshTokenResponse) => void): grpcWeb.ClientReadableStream<user_pb.RefreshTokenResponse>;

  refreshToken(
    request: user_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.RefreshTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/RefreshToken',
    request,
    metadata || {},
    this.methodDescriptorRefreshToken);
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/CreateUser',
    grpcWeb.MethodType.UNARY,
    user_pb.CreateUserRequest,
    user_pb.CreateUserResponse,
    (request: user_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    user_pb.CreateUserResponse.deserializeBinary
  );

  createUser(
    request: user_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.CreateUserResponse>;

  createUser(
    request: user_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.CreateUserResponse) => void): grpcWeb.ClientReadableStream<user_pb.CreateUserResponse>;

  createUser(
    request: user_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.CreateUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorUpdateUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/UpdateUser',
    grpcWeb.MethodType.UNARY,
    user_pb.UpdateUserRequest,
    user_pb.UpdateUserResponse,
    (request: user_pb.UpdateUserRequest) => {
      return request.serializeBinary();
    },
    user_pb.UpdateUserResponse.deserializeBinary
  );

  updateUser(
    request: user_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UpdateUserResponse>;

  updateUser(
    request: user_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UpdateUserResponse) => void): grpcWeb.ClientReadableStream<user_pb.UpdateUserResponse>;

  updateUser(
    request: user_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UpdateUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/UpdateUser',
        request,
        metadata || {},
        this.methodDescriptorUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/UpdateUser',
    request,
    metadata || {},
    this.methodDescriptorUpdateUser);
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/GetUser',
    grpcWeb.MethodType.UNARY,
    user_pb.GetUserRequest,
    user_pb.GetUserResponse,
    (request: user_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    user_pb.GetUserResponse.deserializeBinary
  );

  getUser(
    request: user_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.GetUserResponse>;

  getUser(
    request: user_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.GetUserResponse) => void): grpcWeb.ClientReadableStream<user_pb.GetUserResponse>;

  getUser(
    request: user_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.GetUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorResetPassword = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ResetPassword',
    grpcWeb.MethodType.UNARY,
    user_pb.ResetPasswordRequest,
    user_pb.ResetPasswordResponse,
    (request: user_pb.ResetPasswordRequest) => {
      return request.serializeBinary();
    },
    user_pb.ResetPasswordResponse.deserializeBinary
  );

  resetPassword(
    request: user_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.ResetPasswordResponse>;

  resetPassword(
    request: user_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.ResetPasswordResponse) => void): grpcWeb.ClientReadableStream<user_pb.ResetPasswordResponse>;

  resetPassword(
    request: user_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.ResetPasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ResetPassword',
        request,
        metadata || {},
        this.methodDescriptorResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ResetPassword',
    request,
    metadata || {},
    this.methodDescriptorResetPassword);
  }

  methodDescriptorChangePassword = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ChangePassword',
    grpcWeb.MethodType.UNARY,
    user_pb.ChangePasswordRequest,
    user_pb.ChangePasswordResponse,
    (request: user_pb.ChangePasswordRequest) => {
      return request.serializeBinary();
    },
    user_pb.ChangePasswordResponse.deserializeBinary
  );

  changePassword(
    request: user_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.ChangePasswordResponse>;

  changePassword(
    request: user_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.ChangePasswordResponse) => void): grpcWeb.ClientReadableStream<user_pb.ChangePasswordResponse>;

  changePassword(
    request: user_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.ChangePasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ChangePassword',
        request,
        metadata || {},
        this.methodDescriptorChangePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ChangePassword',
    request,
    metadata || {},
    this.methodDescriptorChangePassword);
  }

  methodDescriptorCreateArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/CreateArt',
    grpcWeb.MethodType.UNARY,
    post_pb.CreateArtRequest,
    post_pb.CreateArtResponse,
    (request: post_pb.CreateArtRequest) => {
      return request.serializeBinary();
    },
    post_pb.CreateArtResponse.deserializeBinary
  );

  createArt(
    request: post_pb.CreateArtRequest,
    metadata: grpcWeb.Metadata | null): Promise<post_pb.CreateArtResponse>;

  createArt(
    request: post_pb.CreateArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: post_pb.CreateArtResponse) => void): grpcWeb.ClientReadableStream<post_pb.CreateArtResponse>;

  createArt(
    request: post_pb.CreateArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: post_pb.CreateArtResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/CreateArt',
        request,
        metadata || {},
        this.methodDescriptorCreateArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/CreateArt',
    request,
    metadata || {},
    this.methodDescriptorCreateArt);
  }

  methodDescriptorUpdateArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/UpdateArt',
    grpcWeb.MethodType.UNARY,
    post_pb.UpdateArtRequest,
    post_pb.UpdateArtResponse,
    (request: post_pb.UpdateArtRequest) => {
      return request.serializeBinary();
    },
    post_pb.UpdateArtResponse.deserializeBinary
  );

  updateArt(
    request: post_pb.UpdateArtRequest,
    metadata: grpcWeb.Metadata | null): Promise<post_pb.UpdateArtResponse>;

  updateArt(
    request: post_pb.UpdateArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: post_pb.UpdateArtResponse) => void): grpcWeb.ClientReadableStream<post_pb.UpdateArtResponse>;

  updateArt(
    request: post_pb.UpdateArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: post_pb.UpdateArtResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/UpdateArt',
        request,
        metadata || {},
        this.methodDescriptorUpdateArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/UpdateArt',
    request,
    metadata || {},
    this.methodDescriptorUpdateArt);
  }

  methodDescriptorGetArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/GetArt',
    grpcWeb.MethodType.UNARY,
    post_pb.GetArtRequest,
    post_pb.GetArtResponse,
    (request: post_pb.GetArtRequest) => {
      return request.serializeBinary();
    },
    post_pb.GetArtResponse.deserializeBinary
  );

  getArt(
    request: post_pb.GetArtRequest,
    metadata: grpcWeb.Metadata | null): Promise<post_pb.GetArtResponse>;

  getArt(
    request: post_pb.GetArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: post_pb.GetArtResponse) => void): grpcWeb.ClientReadableStream<post_pb.GetArtResponse>;

  getArt(
    request: post_pb.GetArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: post_pb.GetArtResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/GetArt',
        request,
        metadata || {},
        this.methodDescriptorGetArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/GetArt',
    request,
    metadata || {},
    this.methodDescriptorGetArt);
  }

  methodDescriptorListArts = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/ListArts',
    grpcWeb.MethodType.UNARY,
    post_pb.ListArtRequest,
    post_pb.ListArtResponse,
    (request: post_pb.ListArtRequest) => {
      return request.serializeBinary();
    },
    post_pb.ListArtResponse.deserializeBinary
  );

  listArts(
    request: post_pb.ListArtRequest,
    metadata: grpcWeb.Metadata | null): Promise<post_pb.ListArtResponse>;

  listArts(
    request: post_pb.ListArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: post_pb.ListArtResponse) => void): grpcWeb.ClientReadableStream<post_pb.ListArtResponse>;

  listArts(
    request: post_pb.ListArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: post_pb.ListArtResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/ListArts',
        request,
        metadata || {},
        this.methodDescriptorListArts,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/ListArts',
    request,
    metadata || {},
    this.methodDescriptorListArts);
  }

  methodDescriptorDeleteArt = new grpcWeb.MethodDescriptor(
    '/pb.ArtGeneratorService/DeleteArt',
    grpcWeb.MethodType.UNARY,
    post_pb.DeleteArtRequest,
    post_pb.DeleteArtResponse,
    (request: post_pb.DeleteArtRequest) => {
      return request.serializeBinary();
    },
    post_pb.DeleteArtResponse.deserializeBinary
  );

  deleteArt(
    request: post_pb.DeleteArtRequest,
    metadata: grpcWeb.Metadata | null): Promise<post_pb.DeleteArtResponse>;

  deleteArt(
    request: post_pb.DeleteArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: post_pb.DeleteArtResponse) => void): grpcWeb.ClientReadableStream<post_pb.DeleteArtResponse>;

  deleteArt(
    request: post_pb.DeleteArtRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: post_pb.DeleteArtResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.ArtGeneratorService/DeleteArt',
        request,
        metadata || {},
        this.methodDescriptorDeleteArt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.ArtGeneratorService/DeleteArt',
    request,
    metadata || {},
    this.methodDescriptorDeleteArt);
  }

}

